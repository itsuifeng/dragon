package com.tianshouzhi.dragon.sharding.jdbc.connection;

import com.tianshouzhi.dragon.common.jdbc.connection.DragonConnection;
import com.tianshouzhi.dragon.sharding.jdbc.statement.DragonShardingPrepareStatement;
import com.tianshouzhi.dragon.sharding.jdbc.statement.DragonShardingStatement;
import com.tianshouzhi.dragon.sharding.route.Router;

import java.sql.*;
import java.util.Properties;

/**
 * Created by TIANSHOUZHI336 on 2016/12/11.
 */
public class DragonShardingConnection extends DragonConnection {

    private Router router;

    public DragonShardingConnection(String username, String password, Router router) throws SQLException {
        super(username, password);
        if(router ==null){
            throw new SQLException("parameter 'router' can't be null");
        }
        this.router=router;
    }

    @Override
    public Statement createStatement() throws SQLException {
        checkClosed();
        DragonShardingStatement dragonShardingStatement = new DragonShardingStatement(this);
        statementList.add(dragonShardingStatement);
        return dragonShardingStatement;
    }
    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        checkClosed();
        DragonShardingStatement dragonShardingStatement = new DragonShardingStatement(resultSetType, resultSetConcurrency, this);
        statementList.add(dragonShardingStatement);
        return dragonShardingStatement;
    }
    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        checkClosed();
        DragonShardingStatement dragonShardingStatement = new DragonShardingStatement(resultSetType, resultSetConcurrency, resultSetHoldability, this);
        statementList.add(dragonShardingStatement);
        return dragonShardingStatement;
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        checkClosed();
        DragonShardingPrepareStatement prepareStatement = new DragonShardingPrepareStatement (sql, this);
        statementList.add(prepareStatement);
        return prepareStatement;
    }
    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        checkClosed();
        DragonShardingPrepareStatement prepareStatement = new DragonShardingPrepareStatement(sql, resultSetType, resultSetConcurrency, this);
        statementList.add(prepareStatement);
        return prepareStatement;
    }
    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        checkClosed();
        DragonShardingPrepareStatement prepareStatement = new DragonShardingPrepareStatement(sql, resultSetType, resultSetConcurrency, resultSetHoldability, this);
        statementList.add(prepareStatement);
        return prepareStatement;
    }
    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        checkClosed();
        DragonShardingPrepareStatement prepareStatement = new DragonShardingPrepareStatement(sql, autoGeneratedKeys, this);
        statementList.add(prepareStatement);
        return prepareStatement;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        checkClosed();
        DragonShardingPrepareStatement prepareStatement = new DragonShardingPrepareStatement(sql, columnIndexes, this);
        statementList.add(prepareStatement);
        return prepareStatement;
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        checkClosed();
        DragonShardingPrepareStatement prepareStatement = new DragonShardingPrepareStatement(sql, columnNames, this);
        statementList.add(prepareStatement);
        return prepareStatement;
    }
    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        throw new UnsupportedOperationException("prepareCall");
    }
    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        throw new UnsupportedOperationException("prepareCall");
    }
    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        throw new UnsupportedOperationException("prepareCall");
    }


    @Override
    public String nativeSQL(String sql) throws SQLException {
        throw new UnsupportedOperationException("nativeSQL");
    }

    @Override
    public void commit() throws SQLException {

    }

    @Override
    public void rollback() throws SQLException {

    }

    @Override
    public void close() throws SQLException {

    }

    @Override
    public DatabaseMetaData getMetaData() throws SQLException {
        return null;
    }

    @Override
    public SQLWarning getWarnings() throws SQLException {
        return null;
    }

    @Override
    public void clearWarnings() throws SQLException {

    }

    @Override
    public Savepoint setSavepoint() throws SQLException {
        return null;
    }

    @Override
    public Savepoint setSavepoint(String name) throws SQLException {
        return null;
    }

    @Override
    public void rollback(Savepoint savepoint) throws SQLException {

    }

    @Override
    public void releaseSavepoint(Savepoint savepoint) throws SQLException {

    }

    @Override
    public Clob createClob() throws SQLException {
        return null;
    }

    @Override
    public Blob createBlob() throws SQLException {
        return null;
    }

    @Override
    public NClob createNClob() throws SQLException {
        return null;
    }

    @Override
    public SQLXML createSQLXML() throws SQLException {
        return null;
    }

    @Override
    public boolean isValid(int timeout) throws SQLException {
        return false;
    }

    @Override
    public String getClientInfo(String name) throws SQLException {
        return null;
    }

    @Override
    public Properties getClientInfo() throws SQLException {
        return null;
    }

    @Override
    public Array createArrayOf(String typeName, Object[] elements) throws SQLException {
        return null;
    }

    @Override
    public Struct createStruct(String typeName, Object[] attributes) throws SQLException {
        return null;
    }

    public Router getRouter() {
        return router;
    }
}
