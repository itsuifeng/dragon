package com.tianshouzhi.dragon.ha.jdbc.statement;

import com.tianshouzhi.dragon.common.jdbc.statement.DragonPrepareStatement;
import com.tianshouzhi.dragon.common.log.Log;
import com.tianshouzhi.dragon.common.log.LoggerFactory;
import com.tianshouzhi.dragon.common.util.MapUtils;
import com.tianshouzhi.dragon.ha.jdbc.connection.DragonHAConnection;

import java.io.InputStream;
import java.io.Reader;
import java.math.BigDecimal;
import java.net.URL;
import java.sql.*;
import java.util.Calendar;
import java.util.LinkedHashMap;
import java.util.Map;

import static com.tianshouzhi.dragon.common.jdbc.statement.DragonPrepareStatement.ParamType.*;
import static com.tianshouzhi.dragon.common.jdbc.statement.DragonPrepareStatement.PrepareCreateType.*;
import static com.tianshouzhi.dragon.common.jdbc.statement.DragonPrepareStatement.PrepareExecuteType.*;

/**
 * Created by TIANSHOUZHI336 on 2016/12/4.
 */
public class DragonHAPrepareStatement extends DragonHAStatement implements DragonPrepareStatement {

	private static final Log LOG= LoggerFactory.getLogger(DragonHAPrepareStatement.class);

	protected Map<Integer, DragonPrepareStatement.ParamSetting> params = new LinkedHashMap<Integer, DragonPrepareStatement.ParamSetting>();

	protected DragonPrepareStatement.PrepareExecuteType prepareExecuteType;

	protected DragonPrepareStatement.PrepareCreateType prepareCreateType;

	public DragonHAPrepareStatement(String sql, DragonHAConnection dragonHAConnection) throws SQLException {
		super(dragonHAConnection);
		this.prepareCreateType = SQL;
		this.sql = sql;
	}

	public DragonHAPrepareStatement(String sql, int resultSetType, int resultSetConcurrency,
	      DragonHAConnection dragonHAConnection) throws SQLException {
		super(resultSetType, resultSetConcurrency, dragonHAConnection);
		this.prepareCreateType = SQL_RESULTSET_TYPE_CONCURRENCY;
		this.sql = sql;
	}

	public DragonHAPrepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability,
	      DragonHAConnection dragonHAConnection) throws SQLException {
		super(resultSetType, resultSetConcurrency, resultSetHoldability, dragonHAConnection);
		this.prepareCreateType = SQL_RESULTSET_TYPE_CONCURRENCY_HOLDABILITY;
		this.sql = sql;
	}

	public DragonHAPrepareStatement(String sql, int autoGeneratedKeys, DragonHAConnection dragonHAConnection)
	      throws SQLException {
		super(dragonHAConnection);
		this.sql = sql;
		this.autoGeneratedKeys = autoGeneratedKeys;
		this.prepareCreateType = SQL_AUTOGENERATEDKEYS;

	}

	public DragonHAPrepareStatement(String sql, int[] columnIndexes, DragonHAConnection dragonHAConnection)
	      throws SQLException {
		super(dragonHAConnection);
		this.sql = sql;
		this.prepareCreateType = SQL_COLUMNINDEXES;
		this.columnIndexes = columnIndexes;
	}

	public DragonHAPrepareStatement(String sql, String[] columnNames, DragonHAConnection dragonHAConnection)
	      throws SQLException {
		super(dragonHAConnection);
		this.sql = sql;
		this.prepareCreateType = SQL_COLUMNNAMES;
		this.columnNames = columnNames;
	}

	@Override
	protected void createRealStatement(Connection realConnection) throws SQLException {
		switch (prepareCreateType) {
		case SQL:
			realStatement = realConnection.prepareStatement(sql);
			break;
		case SQL_AUTOGENERATEDKEYS:
			realStatement = realConnection.prepareStatement(sql, autoGeneratedKeys);
			break;
		case SQL_COLUMNINDEXES:
			realStatement = realConnection.prepareStatement(sql, columnIndexes);
			break;
		case SQL_COLUMNNAMES:
			realStatement = realConnection.prepareStatement(sql, columnNames);
			break;
		case SQL_RESULTSET_TYPE_CONCURRENCY:
			realStatement = realConnection.prepareStatement(sql, resultSetType, resultSetConcurrency);
			break;
		case SQL_RESULTSET_TYPE_CONCURRENCY_HOLDABILITY:
			realStatement = realConnection.prepareStatement(sql, resultSetType, resultSetConcurrency,
			      resultSetHoldability);
			break;
		}
		setStatementParams(realStatement);
	}

	public ResultSet executeQuery() throws SQLException {
		prepareExecuteType = PREPARE_EXECUTE_QUERY;
		doExecute();
		return this.resultSet;
	}

	public int executeUpdate() throws SQLException {
		prepareExecuteType = PREPARE_EXECUTE_UPDATE;
		doExecute();
		return this.updateCount;
	}

	public boolean execute() throws SQLException {
		prepareExecuteType = PREPARE_EXECUTE;
		return doExecute();
	}

	@Override
	protected boolean useSqlTypeCache() {
		return true;
	}

	@Override
	protected boolean doExecuteByType() throws SQLException {
		boolean isResultSet = false;
		if (prepareExecuteType != null) {
			if (LOG.isDebugEnabled()) {
				String log = "【" + dragonHAConnection.getFullName() + "】:" + sql;
				if(MapUtils.isNotEmpty(params)){
					log += ",params:" + params.values();
				}
				LOG.debug(log);
			}
			switch (prepareExecuteType) {
			case PREPARE_EXECUTE:
				isResultSet = ((PreparedStatement) realStatement).execute();
				break;
			case PREPARE_EXECUTE_UPDATE:
				((PreparedStatement) realStatement).executeUpdate();
				break;
			case PREPARE_EXECUTE_QUERY:
				((PreparedStatement) realStatement).executeQuery();
				isResultSet = true;
				break;
			}
			setExecuteResult(isResultSet);
			return isResultSet;
		}
		// 如果走到这一步，说明调用的是父类Statement的执行方法
		return super.doExecuteByType();
	}

	/**
	 * JDBC规范规定：PreparedStatement执行完成之后，可以获取这个对象 由于PreparedStatement是预编译的，因此可能不需要执行，也能获取，这里要求必须执行完成之后，才能返回
	 * 
	 * @return
	 * @throws SQLException
	 */
	@Override
	public ResultSetMetaData getMetaData() throws SQLException {
		if (realStatement != null) {
			return ((PreparedStatement) realStatement).getMetaData();
		}
		return null;
	}

	@Override
	public ParameterMetaData getParameterMetaData() throws SQLException {
		throw new UnsupportedOperationException("getMetaData");
	}

	/**
	 * 优点：能够预处理，执行效率高；参数不同的同一条sql语句执行简便 缺点：只能批处理参数不同的同一条sql语句
	 * 
	 * @throws SQLException
	 */
	@Override
	public void addBatch() throws SQLException {
		batchExecuteInfoList.add(params);
		params = new LinkedHashMap<Integer, DragonPrepareStatement.ParamSetting>();
	}

	@Override
	protected void setStatementParams(Statement realStatement) throws SQLException {
		PreparedStatement ps = (PreparedStatement) realStatement;
		if (executeType != ExecuteType.EXECUTE_BATCH) {
			for (Map.Entry<Integer, DragonPrepareStatement.ParamSetting> entry : params.entrySet()) {
				int parameterIndex = entry.getKey();
				Object[] values = entry.getValue().values;
				DragonPrepareStatement.ParamType paramType = entry.getValue().paramType;
				setPrepareStatementParams(ps, parameterIndex, values, paramType);
			}
		}
		super.setStatementParams(realStatement);
	}

	protected void setBatchExecuteParams() throws SQLException {
		for (Object obj : batchExecuteInfoList) {
			if (obj instanceof String) {
				realStatement.addBatch((String) obj);
				continue;
			}
			if (obj instanceof Map) {
				Map<Integer, DragonPrepareStatement.ParamSetting> parameters = (Map<Integer, DragonPrepareStatement.ParamSetting>) obj;
				for (Map.Entry<Integer, DragonPrepareStatement.ParamSetting> entry : parameters.entrySet()) {
					Integer parameterIndex = entry.getKey();
					Object[] values = entry.getValue().values;
					DragonPrepareStatement.ParamType paramType = entry.getValue().paramType;
					setPrepareStatementParams((PreparedStatement) realStatement, parameterIndex, values, paramType);
				}
				((PreparedStatement) realStatement).addBatch();
			}
		}
	}

	@Override
	protected boolean needGeneratedKeys() {
		return super.needGeneratedKeys() || columnNames != null || columnIndexes != null;
	}

	@Override
	public void setNull(int parameterIndex, int sqlType) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setNull, new Object[] { sqlType }));
	}

	@Override
	public void setNull(int parameterIndex, int sqlType, String typeName) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setNull2, new Object[] { sqlType, typeName }));
	}

	@Override
	public void setBoolean(int parameterIndex, boolean x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setBoolean, new Object[] { x }));
	}

	@Override
	public void setByte(int parameterIndex, byte x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setByte, new Object[] { x }));
	}

	@Override
	public void setShort(int parameterIndex, short x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setShort, new Object[] { x }));
	}

	@Override
	public void setInt(int parameterIndex, int x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setInt, new Object[] { x }));
	}

	@Override
	public void setLong(int parameterIndex, long x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setLong, new Object[] { x }));
	}

	@Override
	public void setFloat(int parameterIndex, float x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setFloat, new Object[] { x }));
	}

	@Override
	public void setDouble(int parameterIndex, double x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setDouble, new Object[] { x }));
	}

	@Override
	public void setBigDecimal(int parameterIndex, BigDecimal x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setBigDecimal, new Object[] { x }));
	}

	@Override
	public void setString(int parameterIndex, String x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setString, new Object[] { x }));
	}

	@Override
	public void setBytes(int parameterIndex, byte[] x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setBytes, new Object[] { x }));
	}

	@Override
	public void setDate(int parameterIndex, Date x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setDate, new Object[] { x }));
	}

	@Override
	public void setTime(int parameterIndex, Time x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setTime, new Object[] { x }));
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setTimestamp, new Object[] { x }));
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, int length) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setAsciiStream2, new Object[] { x, length }));
	}

	@Override
	public void setUnicodeStream(int parameterIndex, InputStream x, int length) throws SQLException {
		params.put(parameterIndex,
		      new DragonPrepareStatement.ParamSetting(setUnicodeStream2, new Object[] { x, length }));
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, int length) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setBinaryStream2, new Object[] { x, length }));
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setObject2, new Object[] { x }));
	}

	@Override
	public void setObject(int parameterIndex, Object x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setObject, new Object[] { x }));
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, int length) throws SQLException {
		params.put(parameterIndex,
		      new DragonPrepareStatement.ParamSetting(setCharacterStream2, new Object[] { reader, length }));
	}

	@Override
	public void setRef(int parameterIndex, Ref x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setRef, new Object[] { x }));
	}

	@Override
	public void setBlob(int parameterIndex, Blob x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setBlob, new Object[] { x }));
	}

	@Override
	public void setClob(int parameterIndex, Clob x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setClob, new Object[] { x }));
	}

	@Override
	public void setArray(int parameterIndex, Array x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setArray, new Object[] { x }));
	}

	@Override
	public void setDate(int parameterIndex, Date x, Calendar cal) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setDate2, new Object[] { x, cal }));
	}

	@Override
	public void setTime(int parameterIndex, Time x, Calendar cal) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setTime2, new Object[] { x, cal }));
	}

	@Override
	public void setTimestamp(int parameterIndex, Timestamp x, Calendar cal) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setTimestamp, new Object[] { x, cal }));
	}

	@Override
	public void setURL(int parameterIndex, URL x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setURL, new Object[] { x }));
	}

	@Override
	public void setRowId(int parameterIndex, RowId x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setRowId, new Object[] { x }));
	}

	@Override
	public void setNString(int parameterIndex, String value) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setNString, new Object[] { value }));
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value, long length) throws SQLException {
		params.put(parameterIndex,
		      new DragonPrepareStatement.ParamSetting(setNCharacterStream2, new Object[] { value, length }));
	}

	@Override
	public void setNClob(int parameterIndex, NClob value) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setNClob, new Object[] { value }));
	}

	@Override
	public void setClob(int parameterIndex, Reader reader, long length) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setClob2, new Object[] { reader, length }));
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream, long length) throws SQLException {
		params.put(parameterIndex,
		      new DragonPrepareStatement.ParamSetting(setBlob2, new Object[] { inputStream, length }));
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader, long length) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setNClob2, new Object[] { reader, length }));
	}

	@Override
	public void setSQLXML(int parameterIndex, SQLXML xmlObject) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setSQLXML, new Object[] { xmlObject }));
	}

	@Override
	public void setObject(int parameterIndex, Object x, int targetSqlType, int scaleOrLength) throws SQLException {
		params.put(parameterIndex,
		      new DragonPrepareStatement.ParamSetting(setObject3, new Object[] { x, targetSqlType, scaleOrLength }));
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x, long length) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setAsciiStream2, new Object[] { x, length }));
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x, long length) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setBinaryStream2, new Object[] { x, length }));
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader, long length) throws SQLException {
		params.put(parameterIndex,
		      new DragonPrepareStatement.ParamSetting(setCharacterStream2, new Object[] { reader, length }));
	}

	@Override
	public void setAsciiStream(int parameterIndex, InputStream x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setAsciiStream, new Object[] { x }));
	}

	@Override
	public void setBinaryStream(int parameterIndex, InputStream x) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setBinaryStream, new Object[] { x }));
	}

	@Override
	public void setCharacterStream(int parameterIndex, Reader reader) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setCharacterStream, new Object[] { reader }));
	}

	@Override
	public void setNCharacterStream(int parameterIndex, Reader value) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setNCharacterStream, new Object[] { value }));
	}

	@Override
	public void setClob(int parameterIndex, Reader reader) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setClob, new Object[] { reader }));
	}

	@Override
	public void setBlob(int parameterIndex, InputStream inputStream) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setBlob, new Object[] { inputStream }));
	}

	@Override
	public void setNClob(int parameterIndex, Reader reader) throws SQLException {
		params.put(parameterIndex, new DragonPrepareStatement.ParamSetting(setNClob, new Object[] { reader }));
	}

	@Override
	public void clearParameters() throws SQLException {
		params.clear();
	}
}
