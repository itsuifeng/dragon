package com.tianshouzhi.dragon.ha.jdbc.connection;

import com.tianshouzhi.dragon.ha.jdbc.statement.DragonHAPrepareStatement;
import com.tianshouzhi.dragon.ha.jdbc.statement.DragonHAStatement;

import java.sql.*;

/**
 * Created by TIANSHOUZHI336 on 2016/12/3.
 */
public class DragonHAConnection extends HAConnectionAdapter implements Connection{

    public DragonHAConnection(HAConnectionManager HAConnectionManager) throws SQLException {
        this(null,null, HAConnectionManager);
    }

    public DragonHAConnection(String userName, String password, HAConnectionManager HAConnectionManager) throws SQLException {
        super(userName, password, HAConnectionManager);
    }

    @Override
    public Statement createStatement() throws SQLException {
        return new DragonHAStatement(this);
    }
    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency) throws SQLException {
        return new DragonHAStatement(resultSetType,resultSetConcurrency,this);
    }

    @Override
    public Statement createStatement(int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new DragonHAStatement(resultSetType,resultSetConcurrency,resultSetHoldability,this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql) throws SQLException {
        return new DragonHAPrepareStatement(sql,this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        return new DragonHAPrepareStatement(sql,resultSetType,resultSetConcurrency,this);
    }
    @Override
    public PreparedStatement prepareStatement(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        return new DragonHAPrepareStatement(sql,resultSetType,resultSetConcurrency,resultSetHoldability,this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int autoGeneratedKeys) throws SQLException {
        return new DragonHAPrepareStatement(sql,autoGeneratedKeys,this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, int[] columnIndexes) throws SQLException {
        return new DragonHAPrepareStatement(sql,columnIndexes,this);
    }

    @Override
    public PreparedStatement prepareStatement(String sql, String[] columnNames) throws SQLException {
        return new DragonHAPrepareStatement(sql,columnNames,this);
    }

    /**
     * 因为不知道存储过程中到底执行了什么，所以：
     * 1、CallableStatement总是应该获取写连接
     * 2、CallableStatement不重试，不需要建立一个类似的DragonHACallableStatement
     * 3、Hint的问题
     * @param sql
     * @return
     * @throws SQLException
     */
    @Override
    public CallableStatement prepareCall(String sql) throws SQLException {
        if(realConnection==null||realConnection.isReadOnly()){
            buildNewWriteConnection();
        }
        return realConnection.prepareCall(sql);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency) throws SQLException {
        if(realConnection==null||realConnection.isReadOnly()){
            buildNewWriteConnection();
        }
        return realConnection.prepareCall(sql,resultSetType,resultSetConcurrency);
    }

    @Override
    public CallableStatement prepareCall(String sql, int resultSetType, int resultSetConcurrency, int resultSetHoldability) throws SQLException {
        if(realConnection==null||realConnection.isReadOnly()){
            buildNewWriteConnection();
        }
        return realConnection.prepareCall(sql,resultSetType,resultSetConcurrency,resultSetHoldability);
    }

}
