#dragon-sharding配置总共分为三个部分：数据源配置、逻辑表配置、运行配置
#===============================数据源配置开始，配置项key以datasource开头=====================================
#数据源的命名格式，会利用此配置项创建一个java.text.MessageFormat对象
datasource.namePattern=dragon_sharding_{0,number,#00}
#数据源名称列表，注意列出的每一个名称都要满足datasource.namePattern规定的格式
datasource.list=dragon_sharding_00,dragon_sharding_01
#提示：如果分库过多，那么我们可能要配置之的对应的数据源也越多，可以使用以下datasource.indexRange配置项替代
#以下配置项会将0-2之间的数字，即0,1,2逐一当做参数传递给datasource.namePattern配置项构造的MessageFormat对象的format方法
#datasource.indexRange=[0,2]

#对datasource.list列出的数据源进行配置，以下为这些数据源提供默认的配置
datasource.datasocueClass=com.alibaba.druid.pool.DruidDataSource
#默认配置key命名方式datasource.default.{property} ，其中{property}表示datasource.datasocueClass定义的物理数据源具有的属性
#不同的物理数据源属性不同，例如：以下属性都是DruidDataSource具有的属性，如果使用其他的数据源，则可能需要使用不同的属性名
datasource.default.username=root
datasource.default.password=shxx12151022
datasource.default.driverClassName=com.mysql.jdbc.Driver
datasource.default.initialSize=10
datasource.default.maxActive=50
datasource.default.maxIdle=8
datasource.default.validationQuery=select 'x'
datasource.default.testOnBorrow=false
datasource.default.testWhileIdle=true

#针对每个数据源的特殊配置，每个数据源的url应该都不同的，因此需要单独配置，其他部分会继承默认的配置，只要用数据源的名称替换掉default即可
datasource.dragon_sharding_00.url=jdbc:mysql://localhost:3306/dragon_sharding_00
datasource.dragon_sharding_01.url=jdbc:mysql://localhost:3306/dragon_sharding_01
#如果想覆盖其他默认配置，例如对于dragon_sharding_02，假设我们希望其initialSize=5，可以使用以下配置
datasource.dragon_sharding_02.initialSize=5

#默认库，主要用于处理不要分库，只需要分表的情况
#datasource.defaultDSName=dragon_sharding_00
#===============================数据源配置结束================================================================

#==============================逻辑表配置开始,配置项key以logicTable开头=======================================
#所有需要拆分的逻辑表
logicTable.list=user,user_account
#表与库的映射关系，如果不配置，说明每个分库里面只有一个分表，表名就是逻辑表名，如果配置了
logicTable.default.namePattern=#logicTable#_{0,number,#0000}
#提示：这段配置说明在dragon_sharding_00和dragon_sharding_01两个分库里面都有四个表user_00，user_01,user_account_00,user_account_01
#如果每个表拆分后，在每个库中的映射规则都相同，可以使用以下配置简化
#逻辑表的db默认路由规则，多个规则用分号";"进行分割
logicTable.default.dbRouteRules=${id}.toLong().intdiv(100)%100
#逻辑表的tb默认路由规则
logicTable.default.tbRouteRules=${id}.toLong()%10000
#logicTable.default.everydb.mapping=#logicTable#_[00,01]
#如果每个库和表的映射规则不同
logicTable.default.dragon_sharding_00.mapping=#logicTable#_[0000,0001]
logicTable.default.dragon_sharding_01.mapping=#logicTable#_[0100,0101]

#如果某个表不使用默认的路由规则，可以使用以下方式覆盖，假设user_account
logicTable.user_account.dbRouteRules=${user_id}.toLong().intdiv(100)%100
logicTable.user_account.tbRouteRules=${user_id}.toLong()%100
#==============================逻辑表配置结束=======================================

#==============================运行配置，可以省略=======================================
#并发执行线程池配置
#核心线程池数，默认值为datasource.list的个数
dragon.executor.corePoolSize=10
#默认为datasource.list*10
dragon.executor.maxPoolSize=30
#任务队列最大容量，默认为所有分表的个数，当执行sql操作时，如果队列已满，会阻塞任务提交线程，直至超时或者队列不为空
dragon.executor.workQueueSize=10000
#默认为3秒
dragon.executor.timeout=3000

#用于上传监控信息，如果没有，可以不配
dragon.appName=draong-sharding